generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id            String          @id @default(uuid()) @map("user_id") @db.Uuid
  username      String
  email         String          @unique
  password_hash String
  created_at    DateTime        @default(now()) @db.Timestamp()
  updated_at    DateTime        @default(now()) @updatedAt
  categories    categories[]
  transactions  transactions[]
  budgets       budgets[]
  notifications notifications[]
}

model categories {
  id           String         @id @default(uuid()) @map("category_id") @db.Uuid
  name         String
  created_at   DateTime       @default(now()) @db.Timestamp()
  updated_at   DateTime       @default(now()) @updatedAt @db.Timestamp()
  user_id      String         @db.Uuid
  user         users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  transactions transactions[]
}

enum TransactionType {
  INCOME
  EXPENSE
}

model transactions {
  id               String          @id @default(uuid()) @map("transaction_id") @db.Uuid
  amount           Float
  transaction_date DateTime        @default(now()) @db.Timestamp()
  description      String          @db.Text
  transaction_type TransactionType
  category_id      String          @db.Uuid
  category         categories      @relation(fields: [category_id], references: [id], onDelete: Cascade)
  user_id          String          @db.Uuid
  user             users           @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model budgets {
  id         String   @id @default(uuid()) @map("budget_id") @db.Uuid
  amount     Float
  start_date DateTime
  end_date   DateTime
  created_at DateTime @default(now()) @db.Timestamp()
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp()
  user_id    String   @db.Uuid
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model notifications {
  id         String   @id @default(uuid()) @map("notification_id") @db.Uuid
  message    String   @db.Text
  is_read    Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamp()
  user_id    String   @db.Uuid
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
